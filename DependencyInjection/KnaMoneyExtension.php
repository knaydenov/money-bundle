<?phpnamespace Kna\MoneyBundle\DependencyInjection;use Money\Currencies\AggregateCurrencies;use Money\Currencies\BitcoinCurrencies;use Money\Currencies\ISOCurrencies;use Money\Currency;use Money\Formatter\BitcoinMoneyFormatter;use Money\Formatter\DecimalMoneyFormatter;use Money\Formatter\IntlMoneyFormatter;use Money\Parser\BitcoinMoneyParser;use Money\Parser\DecimalMoneyParser;use Money\Parser\IntlMoneyParser;use Symfony\Component\Config\FileLocator;use Symfony\Component\DependencyInjection\ContainerBuilder;use Symfony\Component\DependencyInjection\Definition;use Symfony\Component\DependencyInjection\Extension\Extension;use Symfony\Component\DependencyInjection\Loader\XmlFileLoader;use Symfony\Component\DependencyInjection\Reference;class KnaMoneyExtension extends Extension{    /**     * {@inheritdoc}     */    public function load(array $configs, ContainerBuilder $container): void    {        $configuration = new Configuration();        $config = $this->processConfiguration($configuration, $configs);        $loader = new XmlFileLoader($container, new FileLocator(__DIR__.'/../Resources/config'));        $loader->load('services.xml');        $this->configureCurrencies($container, $config);        $this->configureParser($container, $config);        $this->configureFormatter($container, $config);    }    protected function configureCurrencies(ContainerBuilder $container, array $config)    {        $currencies = [];        $currencies[] = new Definition(BitcoinCurrencies::class);        $currencies[] = new Definition(ISOCurrencies::class);        $aggregateCurrencies = new Definition(AggregateCurrencies::class, [$currencies]);        $container->setDefinition('kna_money.currencies.aggregate', $aggregateCurrencies);    }    protected function configureParser(ContainerBuilder $container, array $config)    {        $decimalParser = new Definition(DecimalMoneyParser::class, [$container->getDefinition('kna_money.currencies.aggregate')]);        $decimalParser->addTag('kna_money.parser');        $container->setDefinition('kna_money.parser.decimal', $decimalParser);        $bitcoinParser = new Definition(BitcoinMoneyParser::class, [$config['bitcoin']['fraction_digits']]);        $bitcoinParser->addTag('kna_money.parser');        $container->setDefinition('kna_money.parser.bitcoin', $bitcoinParser);        if (extension_loaded('intl')) {            $numberFormatter = new Definition(\NumberFormatter::class, [$config['locale'], \NumberFormatter::CURRENCY]);            $intlParser = new Definition(IntlMoneyParser::class, [$numberFormatter, $container->getDefinition('kna_money.currencies.aggregate')]);            $intlParser->addTag('kna_money.parser');            $container->setDefinition('kna_money.parser.intl', $intlParser);        }        $parser = $container->findDefinition('kna_money.parser.aggregate');        $taggedParsers = $container->findTaggedServiceIds('kna_money.parser');        $parserReferences = array_map(function ($id) { return new Reference($id);}, array_keys($taggedParsers));        $parser->setArgument(0, $parserReferences);    }    protected function configureFormatter(ContainerBuilder $container, array $config)    {        $isoCurrencyCodes = array_map(function (Currency $currency) {            return $currency->getCode();        }, iterator_to_array(new ISOCurrencies()));        $decimalFormatter = new Definition(DecimalMoneyFormatter::class, [$container->getDefinition('kna_money.currencies.aggregate')]);        foreach ($isoCurrencyCodes as $isoCurrencyCode) {            $decimalFormatter->addTag('kna_money.formatter', ['currency' => $isoCurrencyCode]);        }        $container->setDefinition('kna_money.formatter.decimal', $decimalFormatter);        $bitcoinFormatter = new Definition(BitcoinMoneyFormatter::class, [$config['bitcoin']['fraction_digits'], $container->getDefinition('kna_money.currencies.aggregate')]);        $bitcoinFormatter->addTag('kna_money.formatter', ['currency' => BitcoinCurrencies::CODE]);        $container->setDefinition('kna_money.formatter.bitcoin', $bitcoinFormatter);        if (extension_loaded('intl')) {            $decimalNumberFormatter = new Definition(\NumberFormatter::class, [$config['locale'], \NumberFormatter::DECIMAL]);            $intlDecimalFormatter = new Definition(IntlMoneyFormatter::class, [$decimalNumberFormatter, $container->getDefinition('kna_money.currencies.aggregate')]);            foreach ($isoCurrencyCodes as $isoCurrencyCode) {                $intlDecimalFormatter->addTag('kna_money.formatter', ['currency' => $isoCurrencyCode]);            }            $container->setDefinition('kna_money.formatter.intl_decimal', $intlDecimalFormatter);            $currencyNumberFormatter = new Definition(\NumberFormatter::class, [$config['locale'], \NumberFormatter::CURRENCY]);            $intlMoneyFormatter = new Definition(IntlMoneyFormatter::class, [$currencyNumberFormatter, $container->getDefinition('kna_money.currencies.aggregate')]);            foreach ($isoCurrencyCodes as $isoCurrencyCode) {                $intlMoneyFormatter->addTag('kna_money.formatter', ['currency' => $isoCurrencyCode]);            }            $container->setDefinition('kna_money.formatter.intl_money', $intlMoneyFormatter);        }        $formatter = $container->findDefinition('kna_money.formatter.aggregate');        $taggedFormatters = $container->findTaggedServiceIds('kna_money.formatter');        $formatterConfigs = [];        foreach ($taggedFormatters as $id => $tags) {            $formatterReference = new Reference($id);            foreach ($tags as $tag) {                if (isset($tag['currency'])) {                    $formatterConfigs[] = [                        'priority' => $tag['priority'] ?? 0,                        'currency' => $tag['currency'],                        'formatter' => $formatterReference,                    ];                }            }        }        usort($formatterConfigs, function ($a, $b) {            if ($a['priority'] === $b['priority']) {                return 0;            }            return ($a['priority'] < $b['priority']) ? -1 : 1;        });        $formatters = [];        foreach ($formatterConfigs as $formatterConfig) {            $formatters[$formatterConfig['currency']] = $formatterConfig['formatter'];        }        $formatter->setArgument(0, $formatters);    }}