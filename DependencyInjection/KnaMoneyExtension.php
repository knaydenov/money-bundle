<?phpnamespace Kna\MoneyBundle\DependencyInjection;use Money\Currencies\AggregateCurrencies;use Money\Currencies\BitcoinCurrencies;use Money\Currencies\ISOCurrencies;use Money\Parser\BitcoinMoneyParser;use Money\Parser\DecimalMoneyParser;use Money\Parser\IntlMoneyParser;use Symfony\Component\Config\FileLocator;use Symfony\Component\DependencyInjection\ContainerBuilder;use Symfony\Component\DependencyInjection\Definition;use Symfony\Component\DependencyInjection\Extension\Extension;use Symfony\Component\DependencyInjection\Loader\XmlFileLoader;use Symfony\Component\DependencyInjection\Reference;class KnaMoneyExtension extends Extension{    /**     * {@inheritdoc}     */    public function load(array $configs, ContainerBuilder $container): void    {        $configuration = new Configuration();        $config = $this->processConfiguration($configuration, $configs);        $loader = new XmlFileLoader($container, new FileLocator(__DIR__.'/../Resources/config'));        $loader->load('services.xml');        $this->configureCurrencies($container, $config);        $this->configureParser($container, $config);    }    protected function configureCurrencies(ContainerBuilder $container, array $config)    {        $currencies = [];        $currencies[] = new Definition(BitcoinCurrencies::class);        $currencies[] = new Definition(ISOCurrencies::class);        $aggregateCurrencies = new Definition(AggregateCurrencies::class, [$currencies]);        $container->setDefinition('kna_money.currencies.aggregate', $aggregateCurrencies);    }    protected function configureParser(ContainerBuilder $container, array $config)    {        $decimalParser = new Definition(DecimalMoneyParser::class, [$container->getDefinition('kna_money.currencies.aggregate')]);        $decimalParser->addTag('kna_money.parser');        $container->setDefinition('kna_money.parser.decimal', $decimalParser);        $bitcoinParser = new Definition(BitcoinMoneyParser::class, [$container->getDefinition('kna_money.currencies.aggregate'), 8]);        $bitcoinParser->addTag('kna_money.parser');        $container->setDefinition('kna_money.parser.bitcoin', $bitcoinParser);        if (extension_loaded('intl')) {            $numberFormatter = new Definition(\NumberFormatter::class, [$config['locale'], \NumberFormatter::CURRENCY]);            $intlParser = new Definition(IntlMoneyParser::class, [$numberFormatter, $container->getDefinition('kna_money.currencies.aggregate')]);            $intlParser->addTag('kna_money.parser');            $container->setDefinition('kna_money.parser.intl', $intlParser);        }        $parser = $container->findDefinition('kna_money.parser.aggregate');        $taggedParsers = $container->findTaggedServiceIds('kna_money.parser');        $parserReferences = array_map(function ($id) { return new Reference($id);}, array_keys($taggedParsers));        $parser->setArgument(0, $parserReferences);    }}